apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert --file=docker-compose.db.yml --out=./base
    kompose.service.port: "5432"
    kompose.service.type: ClusterIP
    kompose.version: 1.22.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: db
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert --file=docker-compose.db.yml --out=./base
        kompose.service.port: "5432"
        kompose.service.type: ClusterIP
        kompose.version: 1.22.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/default: "true"
        io.kompose.network/todos-api-buffalo-dbnet: "true"
        io.kompose.service: db
    spec:
      containers:
        - env:
            - name: PGDATA
              value: /var/lib/postgresql/data
            - name: POSTGRES_DB
              value: app
            - name: POSTGRES_PASSWORD
              value: p0stgres
            - name: POSTGRES_USER
              value: postgres
          image: ghcr.io/infrastructure-as-code/postgres:11-alpine
          livenessProbe:
            exec:
              command:
                - PGUSER=postgres PGPASSWORD=p0stgres pg_isready --timeout=300
            failureThreshold: 10
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 10
          name: db
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: dbdata
      restartPolicy: Always
      volumes:
        - name: dbdata
          persistentVolumeClaim:
            claimName: dbdata
status: {}
